<?xml version="1.0" encoding="utf-8"?><rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Programmer Feeds</title><description>Personal Feeds</description><item><guid isPermaLink="false">http://www.hanselman.com/blog/PermaLink.aspx?guid=c6fcee61-5035-4ec0-a803-1249966b78d3</guid><link>http://feeds.hanselman.com/~/132701611/0/scotthanselman~WallabyJS-is-a-slick-and-powerful-test-runner-for-JavaScript-in-your-IDE-or-Editor.aspx</link><category>Javascript</category><title>WallabyJS is a slick and powerful test runner for JavaScript in your IDE or Editor</title><description>&lt;div&gt;&lt;p&gt;I was reminded by a friend to explore &lt;a href="http://wallabyjs.com/"&gt;WallabyJS&lt;/a&gt; this week. I had looked at WallabyJS a while back when it was less mature but I hadn't installed a more recent version. WOW. It's coming along nicely and is super-powerful. You should check it out if you write JavaScript. It's also super fast, for these reasons:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Wallaby.js is &lt;strong&gt;insanely fast&lt;/strong&gt;, because it &lt;strong&gt;only executes tests affected by your code changes&lt;/strong&gt; and runs your tests &lt;strong&gt;in parallel&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;a href="http://wallabyjs.com/"&gt;WallabyJS&lt;/a&gt; has plugins for the IntelliJ platform, Visual Studio, Atom, and more recently, there's preview support for Visual Studio Code and Sublime Text support is coming soon. &lt;/p&gt; &lt;p&gt;It supports supports TypeScript, CoffeeScript, and ES7. Wallaby supports jasmine for running tests but you can plug in your own testing framework and assertion library as you like.&lt;/p&gt; &lt;p&gt;&lt;a href="http://dm.gl/2015/11/26/wallaby-for-visual-studio-code/"&gt;Installing WallabyJS for Visual Studio Code&lt;/a&gt; is very easy now that Code supports extensions.&lt;/p&gt; &lt;p&gt;&lt;img title="Installing WallabyJS on Visual Studio Code" style="margin: 0px 0px 0px 5px; display: inline" alt="Installing WallabyJS on Visual Studio Code" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/vsc_install_f3379029-ff2e-4103-af2e-c1d7db09703e.png" width="600" height="93"&gt;&lt;/p&gt; &lt;p&gt;Once you've installed the extension it will download what's needed and bootstrap WallabyJS. I did have a small issue installing, but and uninstall/reinstall fixed it, so it may have been just a blip.&lt;/p&gt; &lt;p&gt;&lt;a href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/vsc_2.gif"&gt;&lt;img title="Visual Studio Code running WallabyJS" style="display: inline" alt="Visual Studio Code running WallabyJS" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/vsc_thumb.gif" width="688" height="422"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you want to see it in action quickly without much setup, just clone their Calculator sample at &lt;/p&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/wallabyjs/calculator-sample.git&lt;/code&gt; &lt;p&gt;Do note that it's not totally obvious once you've installed WallabyJS that you have to "start" its server manually...for now. &lt;/p&gt; &lt;p&gt;&lt;img title="Starting WallabyJS" style="margin: 0px 0px 0px 5px; display: inline" alt="Starting WallabyJS" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/image_62546902-a056-4f0f-8b2a-832fdf07aa04.png" width="646" height="225"&gt;&lt;/p&gt; &lt;p&gt;Once it has started, it's mostly automatic and runs tests as you type and save. You can access all WallabyJS's commands with hotkeys or from the Visual Studio Code command palette. &lt;/p&gt; &lt;p&gt;&lt;img title="WallabyJS Commands in VS Code" style="margin: 0px 0px 0px 5px; display: inline" alt="WallabyJS Commands in VS Code" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/image_522d77ec-dd22-4468-8d5a-17e24fb6f473.png" width="328" height="364"&gt;&lt;/p&gt; &lt;p&gt;It's great to see a powerful tool like this working in Visual Studio Code. Remember you can get VSCode (now open source!) for any platform here &lt;a href="http://code.visualstudio.com"&gt;code.visualstudio.com&lt;/a&gt; and you can &lt;a href="http://wallabyjs.com/"&gt;get WallabyJS&lt;/a&gt; at their main site.&lt;/p&gt; &lt;p&gt; &lt;hr&gt; &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Sponsor:&lt;/strong&gt; Big thanks to my friends at Redgate for sponsoring the feed this week.Check out their amazing &lt;strong&gt;FREE eBook!&lt;/strong&gt; &lt;strong&gt;Discover 52 tips to improve your .NET performance:&lt;/strong&gt; Our new eBook features dozens of tips and tricks to boost .NET performance. With contributions from .NET experts around the world, you’ll have a faster app in no time. &lt;a href="http://bit.ly/1ShCB9W"&gt;Download your free copy.&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;hr/&gt;© 2015 Scott Hanselman. All rights reserved. &lt;br/&gt;&lt;/div&gt;&lt;div style="clear:both;padding-top:0.2em;"&gt;&lt;a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Share on Google+" href="http://feeds.hanselman.com/_/30/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Tweet This" href="http://feeds.hanselman.com/_/24/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;/div&gt;
</description><pubDate>Wed, 13 Jan 2016 07:20:41 Z</pubDate><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.hanselman.com/blog/WallabyJSIsASlickAndPowerfulTestRunnerForJavaScriptInYourIDEOrEditor.aspx</feedburner:origLink><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.hanselman.com/blog/Trackback.aspx?guid=c6fcee61-5035-4ec0-a803-1249966b78d3</trackback:ping><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.hanselman.com/blog/pingback.aspx</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.hanselman.com/blog/PermaLink.aspx?guid=c6fcee61-5035-4ec0-a803-1249966b78d3</pingback:target><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Hanselman</dc:creator><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.hanselman.com/blog/CommentView.aspx?guid=c6fcee61-5035-4ec0-a803-1249966b78d3</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=c6fcee61-5035-4ec0-a803-1249966b78d3</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">12</slash:comments><comments>http://www.hanselman.com/blog/CommentView.aspx?guid=c6fcee61-5035-4ec0-a803-1249966b78d3</comments><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/">&lt;div&gt;&lt;p&gt;I was reminded by a friend to explore &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~wallabyjs.com/"&gt;WallabyJS&lt;/a&gt; this week. I had looked at WallabyJS a while back when it was less mature but I hadn't installed a more recent version. WOW. It's coming along nicely and is super-powerful. You should check it out if you write JavaScript. It's also super fast, for these reasons:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Wallaby.js is &lt;strong&gt;insanely fast&lt;/strong&gt;, because it &lt;strong&gt;only executes tests affected by your code changes&lt;/strong&gt; and runs your tests &lt;strong&gt;in parallel&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~wallabyjs.com/"&gt;WallabyJS&lt;/a&gt; has plugins for the IntelliJ platform, Visual Studio, Atom, and more recently, there's preview support for Visual Studio Code and Sublime Text support is coming soon. &lt;/p&gt; &lt;p&gt;It supports supports TypeScript, CoffeeScript, and ES7. Wallaby supports jasmine for running tests but you can plug in your own testing framework and assertion library as you like.&lt;/p&gt; &lt;p&gt;&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~dm.gl/2015/11/26/wallaby-for-visual-studio-code/"&gt;Installing WallabyJS for Visual Studio Code&lt;/a&gt; is very easy now that Code supports extensions.&lt;/p&gt; &lt;p&gt;&lt;img title="Installing WallabyJS on Visual Studio Code" style="margin: 0px 0px 0px 5px; display: inline" alt="Installing WallabyJS on Visual Studio Code" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/vsc_install_f3379029-ff2e-4103-af2e-c1d7db09703e.png" width="600" height="93"&gt;&lt;/p&gt; &lt;p&gt;Once you've installed the extension it will download what's needed and bootstrap WallabyJS. I did have a small issue installing, but and uninstall/reinstall fixed it, so it may have been just a blip.&lt;/p&gt; &lt;p&gt;&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/vsc_2.gif"&gt;&lt;img title="Visual Studio Code running WallabyJS" style="display: inline" alt="Visual Studio Code running WallabyJS" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/vsc_thumb.gif" width="688" height="422"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you want to see it in action quickly without much setup, just clone their Calculator sample at &lt;/p&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/wallabyjs/calculator-sample.git&lt;/code&gt; &lt;p&gt;Do note that it's not totally obvious once you've installed WallabyJS that you have to "start" its server manually...for now. &lt;/p&gt; &lt;p&gt;&lt;img title="Starting WallabyJS" style="margin: 0px 0px 0px 5px; display: inline" alt="Starting WallabyJS" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/image_62546902-a056-4f0f-8b2a-832fdf07aa04.png" width="646" height="225"&gt;&lt;/p&gt; &lt;p&gt;Once it has started, it's mostly automatic and runs tests as you type and save. You can access all WallabyJS's commands with hotkeys or from the Visual Studio Code command palette. &lt;/p&gt; &lt;p&gt;&lt;img title="WallabyJS Commands in VS Code" style="margin: 0px 0px 0px 5px; display: inline" alt="WallabyJS Commands in VS Code" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f0f1c1d00d25_1446F/image_522d77ec-dd22-4468-8d5a-17e24fb6f473.png" width="328" height="364"&gt;&lt;/p&gt; &lt;p&gt;It's great to see a powerful tool like this working in Visual Studio Code. Remember you can get VSCode (now open source!) for any platform here &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~code.visualstudio.com"&gt;code.visualstudio.com&lt;/a&gt; and you can &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~wallabyjs.com/"&gt;get WallabyJS&lt;/a&gt; at their main site.&lt;/p&gt; &lt;p&gt; &lt;hr&gt; &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Sponsor:&lt;/strong&gt; Big thanks to my friends at Redgate for sponsoring the feed this week.Check out their amazing &lt;strong&gt;FREE eBook!&lt;/strong&gt; &lt;strong&gt;Discover 52 tips to improve your .NET performance:&lt;/strong&gt; Our new eBook features dozens of tips and tricks to boost .NET performance. With contributions from .NET experts around the world, you’ll have a faster app in no time. &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~bit.ly/1ShCB9W"&gt;Download your free copy.&lt;/a&gt;&lt;/p&gt;
&lt;br/&gt;&lt;hr/&gt;© 2015 Scott Hanselman. All rights reserved. 
&lt;br/&gt;&lt;/div&gt;&lt;Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.hanselman.com/~/i/132701611/0/scotthanselman"&gt;
&lt;div style="clear:both;padding-top:0.2em;"&gt;&lt;a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Share on Google+" href="http://feeds.hanselman.com/_/30/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Tweet This" href="http://feeds.hanselman.com/_/24/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/132701611/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;/div&gt;
</content:encoded></item><item><guid isPermaLink="false">http://www.hanselman.com/blog/PermaLink.aspx?guid=c9a3a8b5-15f4-4fe4-a89b-34fce1d23a64</guid><link>http://feeds.hanselman.com/~/132030487/0/scotthanselman~When-did-we-stop-caring-about-memory-management.aspx</link><category>ASP.NET</category><title>When did we stop caring about memory management?</title><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/SIPP_memory"&gt;&lt;img title="MEMORY! - Image from Wikimedia Commons" style="float: right; margin: 0px 0px 0px 5px; display: inline" alt="MEMORY! - Image from Wikimedia Commons" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/1bd840e5f0a0_8772/SIPP-Modul_3a06546c-6878-4d7a-ac18-d6280d492520.jpg" width="450" align="right" height="245"&gt;&lt;/a&gt;This post is neither a rant nor a complaint, but rather, an observation. &lt;/p&gt; &lt;p&gt;There's some amazing work happening over in the C#-based Kestrel web server. This is an little open source webserver that (currently) sits on libuv and lets you run ASP.NET web applications on Windows, Mac, or Linux. It was started by Louis DeJardin but more recently Ben Adams from Illyriad Games has become a primary committer, and obsessive optimizer.&lt;/p&gt;  &lt;p&gt;Kestrel is now doing 1.2 MILLION requests a second on benchmarking hardware (all published at &lt;a title="https://github.com/aspnet/benchmarks" href="https://github.com/aspnet/benchmarks"&gt;https://github.com/aspnet/benchmarks&lt;/a&gt;) and it's written in C#. There's some amazing stuff going on in the code base with &lt;a href="https://github.com/aspnet/KestrelHttpServer/pull/527/files"&gt;various micro-optimizations that management memory more intelligently&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;blockquote lang="en" class="twitter-tweet" data-conversation="none"&gt; &lt;p lang="en" dir="ltr"&gt;. &lt;a href="https://twitter.com/ben_a_adams"&gt;@ben_a_adams&lt;/a&gt; I think it's safe to say you're on to something in that PR &lt;a href="https://t.co/ELIyxhYyun"&gt;pic.twitter.com/ELIyxhYyun&lt;/a&gt;&lt;/p&gt;— Damian Edwards (@DamianEdwards) &lt;a href="https://twitter.com/DamianEdwards/status/679750255772958720"&gt;December 23, 2015&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; &lt;/p&gt;&lt;p&gt;Here's my question to you, Dear Reader, and I realize it will differ based on your language of choice: &lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;When did you stop caring about Memory Management, and is that a bad thing?&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;When I started school, although I had poked around in BASIC a bit, I learned x86 Assembler first, then C, then Java. We were taught intense memory management and learned on things like &lt;a href="http://www.minix3.org/"&gt;Minix&lt;/a&gt;, writing device drivers, before moving up the stack to garbage collected languages. Many years later &lt;a href="http://www.hanselman.com/blog/RescuingTheTinyOSInC.aspx"&gt;I wrote a tiny operating system simulator in C#&lt;/a&gt; that simulated virtual memory vs physical memory, page faults, etc. &lt;/p&gt; &lt;p&gt; There's a &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/mmref/lang.html"&gt;great reference here at Ravenbook (within their Memory Pool System docs) that lists popular languages and their memory management strategies&lt;/a&gt;. Let me pull this bit out about the C language:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The [C] language is notorious for fostering memory management bugs, including: &lt;ol&gt; &lt;li&gt;Accessing arrays with indexes that are out of bounds;  &lt;li&gt;Using &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/glossary/s.html#term-stack-allocation"&gt;&lt;em&gt;stack-allocated&lt;/em&gt;&lt;/a&gt; structures beyond their &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/glossary/l.html#term-lifetime"&gt;&lt;em&gt;lifetimes&lt;/em&gt;&lt;/a&gt; (see &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/glossary/u.html#term-use-after-free"&gt;&lt;em&gt;use after free&lt;/em&gt;&lt;/a&gt;);  &lt;li&gt;Using &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/glossary/h.html#term-heap-allocation"&gt;&lt;em&gt;heap-allocated&lt;/em&gt;&lt;/a&gt; structures after &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/glossary/f.html#term-free-1"&gt;&lt;em&gt;freeing&lt;/em&gt;&lt;/a&gt; them (see &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/glossary/u.html#term-use-after-free"&gt;&lt;em&gt;use after free&lt;/em&gt;&lt;/a&gt;);  &lt;li&gt;Neglecting to free heap-allocated objects when they are no longer required (see &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/glossary/m.html#term-memory-leak"&gt;&lt;em&gt;memory leak&lt;/em&gt;&lt;/a&gt;);  &lt;li&gt;Failing to allocate memory for a &lt;a href="https://www.ravenbrook.com/project/mps/master/manual/html/glossary/p.html#term-pointer"&gt;&lt;em&gt;pointer&lt;/em&gt;&lt;/a&gt; before using it;  &lt;li&gt;Allocating insufficient memory for the intended contents;  &lt;li&gt;Loading from allocated memory before storing into it;  &lt;li&gt;Dereferencing non-pointers as if they were pointers.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt; &lt;p&gt;When was the last time you thought about these things, assuming you're an &lt;strong&gt;application developer&lt;/strong&gt;? &lt;/p&gt; &lt;p&gt;I've met and spoken to a number of application developers who have never thought about memory management in 10 and 15 year long careers. Java and C# and other languages have completely hidden this aspect of software from them. &lt;/p&gt; &lt;p&gt;BUT.&lt;/p&gt; &lt;p&gt;They have performance issues. They don't profile their applications. And sometimes, just sometimes, they struggle to find out why their application is slow.&lt;/p&gt; &lt;p&gt;My buddy Glenn Condron says you don't have to think about memory management until you totally have to think about memory management. He says "time spent sweating memory is time you're not writing your app. The hard part is developing the experience is that you need to know when you need to care."&lt;/p&gt; &lt;p&gt;I've talked about this a little in &lt;a href="http://thisdeveloperslife.com/post/1-0-6-abstraction"&gt;podcasts like the This Developer's Life episode on Abstractions&lt;/a&gt; with guests like &lt;a href="http://en.wikipedia.org/wiki/Ward_Cunningham"&gt;Ward Cunningham&lt;/a&gt;, &lt;a href="http://www.charlespetzold.com/"&gt;Charles Petzold&lt;/a&gt;, and &lt;a href="http://danbricklin.com/history/saimiddle.htm"&gt;Dan Bricklin&lt;/a&gt; as well as this post called &lt;a href="http://www.hanselman.com/blog/PleaseLearnToThinkAboutAbstractions.aspx"&gt;Please Learn to Think about Abstractions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;How low should we go? How useful is it to know about C-style memory management when you're a front-end JavaScript Developer? Should we make it functional then make it fast...but if it's fast enough, then just make it work? The tragedy here is that if it "works on my machine" then the developer never goes back to tighten the screws.&lt;/p&gt; &lt;p&gt;I propose it IS important but I also think it's important to know &lt;a href="https://www.youtube.com/watch?v=K4JhruinbWc"&gt;how a differential gear works&lt;/a&gt;, but that's a "because" argument. What do you think?&lt;/p&gt; &lt;hr&gt;  &lt;p&gt;&lt;strong&gt;Sponsor:&lt;/strong&gt; Big thanks to Infragistics for sponsoring the blog this week! Responsive web design on any browser, any platform and any device with &lt;a href="http://bit.ly/1JWnScH"&gt;Infragistics jQuery/HTML5 Controls&lt;/a&gt;.&amp;nbsp; Get super-charged performance with the world’s fastest HTML5 Grid - &lt;a href="http://bit.ly/1JWnScH"&gt;Download for free now&lt;/a&gt;!&lt;/p&gt;&lt;br/&gt;&lt;hr/&gt;© 2015 Scott Hanselman. All rights reserved. &lt;br/&gt;&lt;/div&gt;&lt;div style="clear:both;padding-top:0.2em;"&gt;&lt;a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Share on Google+" href="http://feeds.hanselman.com/_/30/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Tweet This" href="http://feeds.hanselman.com/_/24/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;/div&gt;
</description><pubDate>Fri, 08 Jan 2016 18:22:31 Z</pubDate><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.hanselman.com/blog/WhenDidWeStopCaringAboutMemoryManagement.aspx</feedburner:origLink><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.hanselman.com/blog/Trackback.aspx?guid=c9a3a8b5-15f4-4fe4-a89b-34fce1d23a64</trackback:ping><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.hanselman.com/blog/pingback.aspx</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.hanselman.com/blog/PermaLink.aspx?guid=c9a3a8b5-15f4-4fe4-a89b-34fce1d23a64</pingback:target><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Hanselman</dc:creator><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.hanselman.com/blog/CommentView.aspx?guid=c9a3a8b5-15f4-4fe4-a89b-34fce1d23a64</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=c9a3a8b5-15f4-4fe4-a89b-34fce1d23a64</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">76</slash:comments><comments>http://www.hanselman.com/blog/CommentView.aspx?guid=c9a3a8b5-15f4-4fe4-a89b-34fce1d23a64</comments><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/">&lt;div&gt;&lt;p&gt;&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://en.wikipedia.org/wiki/SIPP_memory"&gt;&lt;img title="MEMORY! - Image from Wikimedia Commons" style="float: right; margin: 0px 0px 0px 5px; display: inline" alt="MEMORY! - Image from Wikimedia Commons" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/1bd840e5f0a0_8772/SIPP-Modul_3a06546c-6878-4d7a-ac18-d6280d492520.jpg" width="450" align="right" height="245"&gt;&lt;/a&gt;This post is neither a rant nor a complaint, but rather, an observation. &lt;/p&gt; &lt;p&gt;There's some amazing work happening over in the C#-based Kestrel web server. This is an little open source webserver that (currently) sits on libuv and lets you run ASP.NET web applications on Windows, Mac, or Linux. It was started by Louis DeJardin but more recently Ben Adams from Illyriad Games has become a primary committer, and obsessive optimizer.&lt;/p&gt;  &lt;p&gt;Kestrel is now doing 1.2 MILLION requests a second on benchmarking hardware (all published at &lt;a title="https://github.com/aspnet/benchmarks" href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/aspnet/benchmarks"&gt;https://github.com/aspnet/benchmarks&lt;/a&gt;) and it's written in C#. There's some amazing stuff going on in the code base with &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/aspnet/KestrelHttpServer/pull/527/files"&gt;various micro-optimizations that management memory more intelligently&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;blockquote lang="en" class="twitter-tweet" data-conversation="none"&gt; &lt;p lang="en" dir="ltr"&gt;. &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/ben_a_adams"&gt;@ben_a_adams&lt;/a&gt; I think it's safe to say you're on to something in that PR &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://t.co/ELIyxhYyun"&gt;pic.twitter.com/ELIyxhYyun&lt;/a&gt;&lt;/p&gt;— Damian Edwards (@DamianEdwards) &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://twitter.com/DamianEdwards/status/679750255772958720"&gt;December 23, 2015&lt;/a&gt;&lt;/blockquote&gt; &lt;/p&gt;&lt;p&gt;Here's my question to you, Dear Reader, and I realize it will differ based on your language of choice: &lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;When did you stop caring about Memory Management, and is that a bad thing?&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;When I started school, although I had poked around in BASIC a bit, I learned x86 Assembler first, then C, then Java. We were taught intense memory management and learned on things like &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.minix3.org/"&gt;Minix&lt;/a&gt;, writing device drivers, before moving up the stack to garbage collected languages. Many years later &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.hanselman.com/blog/RescuingTheTinyOSInC.aspx"&gt;I wrote a tiny operating system simulator in C#&lt;/a&gt; that simulated virtual memory vs physical memory, page faults, etc. &lt;/p&gt; &lt;p&gt; There's a &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/mmref/lang.html"&gt;great reference here at Ravenbook (within their Memory Pool System docs) that lists popular languages and their memory management strategies&lt;/a&gt;. Let me pull this bit out about the C language:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The [C] language is notorious for fostering memory management bugs, including: &lt;ol&gt; &lt;li&gt;Accessing arrays with indexes that are out of bounds;  &lt;li&gt;Using &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/glossary/s.html#term-stack-allocation"&gt;&lt;em&gt;stack-allocated&lt;/em&gt;&lt;/a&gt; structures beyond their &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/glossary/l.html#term-lifetime"&gt;&lt;em&gt;lifetimes&lt;/em&gt;&lt;/a&gt; (see &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/glossary/u.html#term-use-after-free"&gt;&lt;em&gt;use after free&lt;/em&gt;&lt;/a&gt;);  &lt;li&gt;Using &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/glossary/h.html#term-heap-allocation"&gt;&lt;em&gt;heap-allocated&lt;/em&gt;&lt;/a&gt; structures after &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/glossary/f.html#term-free-1"&gt;&lt;em&gt;freeing&lt;/em&gt;&lt;/a&gt; them (see &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/glossary/u.html#term-use-after-free"&gt;&lt;em&gt;use after free&lt;/em&gt;&lt;/a&gt;);  &lt;li&gt;Neglecting to free heap-allocated objects when they are no longer required (see &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/glossary/m.html#term-memory-leak"&gt;&lt;em&gt;memory leak&lt;/em&gt;&lt;/a&gt;);  &lt;li&gt;Failing to allocate memory for a &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.ravenbrook.com/project/mps/master/manual/html/glossary/p.html#term-pointer"&gt;&lt;em&gt;pointer&lt;/em&gt;&lt;/a&gt; before using it;  &lt;li&gt;Allocating insufficient memory for the intended contents;  &lt;li&gt;Loading from allocated memory before storing into it;  &lt;li&gt;Dereferencing non-pointers as if they were pointers.&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt; &lt;p&gt;When was the last time you thought about these things, assuming you're an &lt;strong&gt;application developer&lt;/strong&gt;? &lt;/p&gt; &lt;p&gt;I've met and spoken to a number of application developers who have never thought about memory management in 10 and 15 year long careers. Java and C# and other languages have completely hidden this aspect of software from them. &lt;/p&gt; &lt;p&gt;BUT.&lt;/p&gt; &lt;p&gt;They have performance issues. They don't profile their applications. And sometimes, just sometimes, they struggle to find out why their application is slow.&lt;/p&gt; &lt;p&gt;My buddy Glenn Condron says you don't have to think about memory management until you totally have to think about memory management. He says "time spent sweating memory is time you're not writing your app. The hard part is developing the experience is that you need to know when you need to care."&lt;/p&gt; &lt;p&gt;I've talked about this a little in &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~thisdeveloperslife.com/post/1-0-6-abstraction"&gt;podcasts like the This Developer's Life episode on Abstractions&lt;/a&gt; with guests like &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~en.wikipedia.org/wiki/Ward_Cunningham"&gt;Ward Cunningham&lt;/a&gt;, &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.charlespetzold.com/"&gt;Charles Petzold&lt;/a&gt;, and &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~danbricklin.com/history/saimiddle.htm"&gt;Dan Bricklin&lt;/a&gt; as well as this post called &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.hanselman.com/blog/PleaseLearnToThinkAboutAbstractions.aspx"&gt;Please Learn to Think about Abstractions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;How low should we go? How useful is it to know about C-style memory management when you're a front-end JavaScript Developer? Should we make it functional then make it fast...but if it's fast enough, then just make it work? The tragedy here is that if it "works on my machine" then the developer never goes back to tighten the screws.&lt;/p&gt; &lt;p&gt;I propose it IS important but I also think it's important to know &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=K4JhruinbWc"&gt;how a differential gear works&lt;/a&gt;, but that's a "because" argument. What do you think?&lt;/p&gt; &lt;hr&gt;  &lt;p&gt;&lt;strong&gt;Sponsor:&lt;/strong&gt; Big thanks to Infragistics for sponsoring the blog this week! Responsive web design on any browser, any platform and any device with &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~bit.ly/1JWnScH"&gt;Infragistics jQuery/HTML5 Controls&lt;/a&gt;.&amp;nbsp; Get super-charged performance with the world’s fastest HTML5 Grid - &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~bit.ly/1JWnScH"&gt;Download for free now&lt;/a&gt;!&lt;/p&gt;
&lt;br/&gt;&lt;hr/&gt;© 2015 Scott Hanselman. All rights reserved. 
&lt;br/&gt;&lt;/div&gt;&lt;Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.hanselman.com/~/i/132030487/0/scotthanselman"&gt;
&lt;div style="clear:both;padding-top:0.2em;"&gt;&lt;a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Share on Google+" href="http://feeds.hanselman.com/_/30/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Tweet This" href="http://feeds.hanselman.com/_/24/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/132030487/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;/div&gt;
</content:encoded></item><item><guid isPermaLink="false">http://www.hanselman.com/blog/PermaLink.aspx?guid=6cbb04de-9804-48f1-bad8-62afc0aef3eb</guid><link>http://feeds.hanselman.com/~/131629835/0/scotthanselman~Best-practices-for-private-config-data-and-connection-strings-in-configuration-in-ASPNET-and-Azure.aspx</link><category>ASP.NET</category><title>Best practices for private config data and connection strings in configuration in ASP.NET and Azure</title><description>&lt;div&gt;&lt;p&gt;&lt;a href="http://getcolorstock.com"&gt;&lt;img title="Image Copyright Shea Parikh / getcolorstock.com - used under license" style="float: right; margin: 0px 0px 0px 5px; display: inline" alt="Image Copyright Shea Parikh / getcolorstock.com - used under license" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/44e8b110adbe_1342D/IMG_6004_cfa16741-3489-4eaf-a484-4df0bc1d138a.jpg" width="500" align="right" height="335"&gt;&lt;/a&gt;A reader emailed asking how to avoid accidentally checking in passwords and other sensitive data into GitHub or source control in general. I think it's fair to say that we've all done this once or twice - it's a rite of passage for developers old and new.&lt;/p&gt; &lt;p&gt;The simplest way to avoid checking in passwords and/or connection strings into source control is to (no joke) &lt;strong&gt;keep passwords and connection strings out of your source.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Sounds condescending or funny, but it's not, it's true. You can't check in what doesn't exist on disk.&lt;/p&gt; &lt;p&gt;That said, sometimes you just need to mark a file as "ignored," meaning it's not under source control. For some systems that involves externalizing configuration values that may be in shared config files with a bunch of non-sensitive config data.&lt;/p&gt; &lt;h3&gt;ASP.NET 4.6 secrets and connection strings&lt;/h3&gt; &lt;p&gt;Just to be clear, how "secret" something is is up to you. If it's truly cryptographically secret or something like a private key, you should be looking at &lt;a href="https://azure.microsoft.com/en-us/services/key-vault/"&gt;data protection systems or a Key Vault like Azure Key Vault&lt;/a&gt;. Here we are talking about medium business impact web apps with API keys for 3rd party web APIs and connection strings that can live in memory for short periods. Be smart.&lt;/p&gt; &lt;p&gt;ASP.NET 4.6 has web.config XML files like this with name/value pairs.&lt;/p&gt;&lt;pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;"&gt;&amp;lt;appSettings&amp;gt;      &lt;br&gt;    &amp;lt;add key="name" value="someValue" /&amp;gt;&lt;br&gt;    &amp;lt;add key="name" value="someSECRETValue" /&amp;gt;&lt;br&gt;&amp;lt;/appSettings&amp;gt;      &lt;/pre&gt;
&lt;p&gt;We don't want secrets in there! Instead, move them out like this:&lt;/p&gt;&lt;pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;"&gt;&amp;lt;appSettings file="Web.SECRETS.config"&amp;gt;      &lt;br&gt;    &amp;lt;add key="name" value="someValue" /&amp;gt;&lt;br&gt;&amp;lt;/appSettings&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Then you just put another appSettings section in that web.secrets.config file and it gets merged at runtime.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: It's worth pointing out that the AppSettings technique also works for Console apps with an app.config.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Finally, be sure to add Web.secrets.config (or, even better, make it *.secrets and use a unique extension to identify your sensitive config.&lt;/p&gt;
&lt;p&gt;This externalizing of config also works with the &amp;lt;connectionStrings&amp;gt; section, except you use the configSource attribute like this:&lt;/p&gt;&lt;pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;"&gt;&amp;lt;connectionStrings configSource="secretConnectionStrings.config"&amp;gt;&lt;br&gt;&amp;lt;/connectionStrings&amp;gt;&lt;/pre&gt;
&lt;h3&gt;Connection Strings/App Secrets in Azure&lt;/h3&gt;
&lt;p&gt;When you're deploying a web app to Azure (as often these apps are deployed from source/GitHub, etc) you should NEVER put your connection strings or appSettings in web.config or hard code them.&lt;/p&gt;
&lt;p&gt;Instead, always use the Application Settings configuration section of Web Apps in Azure. &lt;/p&gt;
&lt;p&gt;&lt;img title="Application Settings and Secrets in Azure" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Application Settings and Secrets in Azure" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/44e8b110adbe_1342D/image_c0ff064a-92fb-4b74-94b8-16a076986c91.png" width="655" height="545"&gt;&lt;/p&gt;
&lt;p&gt;These collection strings and name value pairs will automatically be made available &lt;em&gt;transparently &lt;/em&gt;to your website so you don't need to change any ASP.NET code. Considered them to have more narrow scope than what's in web.config, and the system will merge the set automatically. &lt;/p&gt;
&lt;p&gt;Additionally they are made available as Environment Variables, so you can Environment.GetEnvironmentVariable("APPSETTING_yourkey") as well. This works in any web framework, not just ASP.NET, so in PHP you just getenv('APPSETTING_yourkey") as you like.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://azure.microsoft.com/en-us/blog/windows-azure-web-sites-how-application-strings-and-connection-strings-work/"&gt;full list&lt;/a&gt; of database connection string types and the prepended string used for environment variables is below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you select “Sql Databases”, the prepended string is “SQLAZURECONNSTR_” 
&lt;li&gt;If you select “SQL Server” the prepended string is “SQLCONNSTR_” 
&lt;li&gt;If you select “MySQL” the prepended string is “MYSQLCONNSTR_” 
&lt;li&gt;If you select “Custom” the prepended string is “CUSTOMCONNSTR_”&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;ASP.NET 5&lt;/h3&gt;
&lt;p&gt;ASP.NET 5 has the concept of User Secrets or User-Level Secrets where the key/value pair &lt;em&gt;does &lt;/em&gt;exist in a file BUT that file isn't in your project folder, it's stored in your OS user profile folder. That way there's no chance it'll get checked into source control. There's a &lt;a href="https://docs.asp.net/en/latest/security/app-secrets.html"&gt;secret manager&lt;/a&gt; (it's all beta so expect it to change) where you can set name/value pairs.&lt;/p&gt;
&lt;p&gt;ASP.NET also has very flexible scoping rules in code. You can have an appSettings, then an environment-specific (dev, test, staging, prod) appSettings, then User Secrets, and &lt;em&gt;then &lt;/em&gt;environment variables. All of this is &lt;a href="https://docs.asp.net/en/latest/security/app-secrets.html#accessing-user-secrets-via-configuration"&gt;done via code configuration&lt;/a&gt; and is, as I mentioned, deeply flexible. If you don't like it, you can change it.&lt;/p&gt;&lt;pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;"&gt;var builder = new ConfigurationBuilder()&lt;br&gt;    .AddJsonFile("appsettings.json")&lt;br&gt;    .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true);&lt;br&gt;&lt;br&gt;if (env.IsDevelopment())&lt;br&gt;{&lt;br&gt;    // For more details on using the user secret store see http://go.microsoft.com/fwlink/?LinkID=532709&lt;br&gt;    builder.AddUserSecrets();&lt;br&gt;}&lt;br&gt;&lt;br&gt;builder.AddEnvironmentVariables();&lt;br&gt;Configuration = builder.Build();
&lt;/pre&gt;
&lt;p&gt;So, in conclusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't put private stuff in code. &lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Seems obvious, &lt;a href="http://www.internetnews.com/blog/skerner/github-search-exposes-passwords.html"&gt;but&lt;/a&gt;...&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Avoid putting private stuff in &lt;em&gt;common &lt;/em&gt;config files 
&lt;ul&gt;
&lt;li&gt;Externalize them AND ignore the externalized file so they don't get checked in&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Consider using Environment Variables or User-level config options. 
&lt;ul&gt;
&lt;li&gt;Keep sensitive config out of your project folder at development time&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I'm sure I missed something. What are YOUR tips, Dear Reader? &lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.asp.net/identity/overview/features-api/best-practices-for-deploying-passwords-and-other-sensitive-data-to-aspnet-and-azure"&gt;Best practices for deploying passwords and other sensitive data to ASP.NET and Azure App Service&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Image Copyright Shea Parikh - used under license from &lt;/em&gt;&lt;a href="http://getcolorstock.com"&gt;&lt;em&gt;http://getcolorstock.com&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Sponsor:&lt;/strong&gt; Big thanks to Infragistics for sponsoring the blog this week! Responsive web design on any browser, any platform and any device with &lt;a href="http://bit.ly/1JWnScH"&gt;Infragistics jQuery/HTML5 Controls&lt;/a&gt;.&amp;nbsp; Get super-charged performance with the world’s fastest HTML5 Grid - &lt;a href="http://bit.ly/1JWnScH"&gt;Download for free now&lt;/a&gt;!&lt;/p&gt;&lt;br/&gt;&lt;hr/&gt;© 2015 Scott Hanselman. All rights reserved. &lt;br/&gt;&lt;/div&gt;&lt;div style="clear:both;padding-top:0.2em;"&gt;&lt;a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Share on Google+" href="http://feeds.hanselman.com/_/30/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Tweet This" href="http://feeds.hanselman.com/_/24/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;/div&gt;
</description><pubDate>Wed, 06 Jan 2016 06:59:12 Z</pubDate><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.hanselman.com/blog/BestPracticesForPrivateConfigDataAndConnectionStringsInConfigurationInASPNETAndAzure.aspx</feedburner:origLink><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.hanselman.com/blog/Trackback.aspx?guid=6cbb04de-9804-48f1-bad8-62afc0aef3eb</trackback:ping><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.hanselman.com/blog/pingback.aspx</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.hanselman.com/blog/PermaLink.aspx?guid=6cbb04de-9804-48f1-bad8-62afc0aef3eb</pingback:target><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Hanselman</dc:creator><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.hanselman.com/blog/CommentView.aspx?guid=6cbb04de-9804-48f1-bad8-62afc0aef3eb</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=6cbb04de-9804-48f1-bad8-62afc0aef3eb</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">49</slash:comments><comments>http://www.hanselman.com/blog/CommentView.aspx?guid=6cbb04de-9804-48f1-bad8-62afc0aef3eb</comments><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/">&lt;div&gt;&lt;p&gt;&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~getcolorstock.com"&gt;&lt;img title="Image Copyright Shea Parikh / getcolorstock.com - used under license" style="float: right; margin: 0px 0px 0px 5px; display: inline" alt="Image Copyright Shea Parikh / getcolorstock.com - used under license" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/44e8b110adbe_1342D/IMG_6004_cfa16741-3489-4eaf-a484-4df0bc1d138a.jpg" width="500" align="right" height="335"&gt;&lt;/a&gt;A reader emailed asking how to avoid accidentally checking in passwords and other sensitive data into GitHub or source control in general. I think it's fair to say that we've all done this once or twice - it's a rite of passage for developers old and new.&lt;/p&gt; &lt;p&gt;The simplest way to avoid checking in passwords and/or connection strings into source control is to (no joke) &lt;strong&gt;keep passwords and connection strings out of your source.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Sounds condescending or funny, but it's not, it's true. You can't check in what doesn't exist on disk.&lt;/p&gt; &lt;p&gt;That said, sometimes you just need to mark a file as "ignored," meaning it's not under source control. For some systems that involves externalizing configuration values that may be in shared config files with a bunch of non-sensitive config data.&lt;/p&gt; &lt;h3&gt;ASP.NET 4.6 secrets and connection strings&lt;/h3&gt; &lt;p&gt;Just to be clear, how "secret" something is is up to you. If it's truly cryptographically secret or something like a private key, you should be looking at &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/services/key-vault/"&gt;data protection systems or a Key Vault like Azure Key Vault&lt;/a&gt;. Here we are talking about medium business impact web apps with API keys for 3rd party web APIs and connection strings that can live in memory for short periods. Be smart.&lt;/p&gt; &lt;p&gt;ASP.NET 4.6 has web.config XML files like this with name/value pairs.&lt;/p&gt;&lt;pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;"&gt;&amp;lt;appSettings&amp;gt;      
&lt;br&gt;    &amp;lt;add key="name" value="someValue" /&amp;gt;
&lt;br&gt;    &amp;lt;add key="name" value="someSECRETValue" /&amp;gt;
&lt;br&gt;&amp;lt;/appSettings&amp;gt;      &lt;/pre&gt;
&lt;p&gt;We don't want secrets in there! Instead, move them out like this:&lt;/p&gt;&lt;pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;"&gt;&amp;lt;appSettings file="Web.SECRETS.config"&amp;gt;      
&lt;br&gt;    &amp;lt;add key="name" value="someValue" /&amp;gt;
&lt;br&gt;&amp;lt;/appSettings&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Then you just put another appSettings section in that web.secrets.config file and it gets merged at runtime.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: It's worth pointing out that the AppSettings technique also works for Console apps with an app.config.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Finally, be sure to add Web.secrets.config (or, even better, make it *.secrets and use a unique extension to identify your sensitive config.&lt;/p&gt;
&lt;p&gt;This externalizing of config also works with the &amp;lt;connectionStrings&amp;gt; section, except you use the configSource attribute like this:&lt;/p&gt;&lt;pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;"&gt;&amp;lt;connectionStrings configSource="secretConnectionStrings.config"&amp;gt;
&lt;br&gt;&amp;lt;/connectionStrings&amp;gt;&lt;/pre&gt;
&lt;h3&gt;Connection Strings/App Secrets in Azure&lt;/h3&gt;
&lt;p&gt;When you're deploying a web app to Azure (as often these apps are deployed from source/GitHub, etc) you should NEVER put your connection strings or appSettings in web.config or hard code them.&lt;/p&gt;
&lt;p&gt;Instead, always use the Application Settings configuration section of Web Apps in Azure. &lt;/p&gt;
&lt;p&gt;&lt;img title="Application Settings and Secrets in Azure" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Application Settings and Secrets in Azure" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/44e8b110adbe_1342D/image_c0ff064a-92fb-4b74-94b8-16a076986c91.png" width="655" height="545"&gt;&lt;/p&gt;
&lt;p&gt;These collection strings and name value pairs will automatically be made available &lt;em&gt;transparently &lt;/em&gt;to your website so you don't need to change any ASP.NET code. Considered them to have more narrow scope than what's in web.config, and the system will merge the set automatically. &lt;/p&gt;
&lt;p&gt;Additionally they are made available as Environment Variables, so you can Environment.GetEnvironmentVariable("APPSETTING_yourkey") as well. This works in any web framework, not just ASP.NET, so in PHP you just getenv('APPSETTING_yourkey") as you like.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://azure.microsoft.com/en-us/blog/windows-azure-web-sites-how-application-strings-and-connection-strings-work/"&gt;full list&lt;/a&gt; of database connection string types and the prepended string used for environment variables is below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you select “Sql Databases”, the prepended string is “SQLAZURECONNSTR_” 
&lt;li&gt;If you select “SQL Server” the prepended string is “SQLCONNSTR_” 
&lt;li&gt;If you select “MySQL” the prepended string is “MYSQLCONNSTR_” 
&lt;li&gt;If you select “Custom” the prepended string is “CUSTOMCONNSTR_”&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;ASP.NET 5&lt;/h3&gt;
&lt;p&gt;ASP.NET 5 has the concept of User Secrets or User-Level Secrets where the key/value pair &lt;em&gt;does &lt;/em&gt;exist in a file BUT that file isn't in your project folder, it's stored in your OS user profile folder. That way there's no chance it'll get checked into source control. There's a &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.asp.net/en/latest/security/app-secrets.html"&gt;secret manager&lt;/a&gt; (it's all beta so expect it to change) where you can set name/value pairs.&lt;/p&gt;
&lt;p&gt;ASP.NET also has very flexible scoping rules in code. You can have an appSettings, then an environment-specific (dev, test, staging, prod) appSettings, then User Secrets, and &lt;em&gt;then &lt;/em&gt;environment variables. All of this is &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.asp.net/en/latest/security/app-secrets.html#accessing-user-secrets-via-configuration"&gt;done via code configuration&lt;/a&gt; and is, as I mentioned, deeply flexible. If you don't like it, you can change it.&lt;/p&gt;&lt;pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;"&gt;var builder = new ConfigurationBuilder()
&lt;br&gt;    .AddJsonFile("appsettings.json")
&lt;br&gt;    .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true);
&lt;br&gt;
&lt;br&gt;if (env.IsDevelopment())
&lt;br&gt;{
&lt;br&gt;    // For more details on using the user secret store see http://go.microsoft.com/fwlink/?LinkID=532709
&lt;br&gt;    builder.AddUserSecrets();
&lt;br&gt;}
&lt;br&gt;
&lt;br&gt;builder.AddEnvironmentVariables();
&lt;br&gt;Configuration = builder.Build();
&lt;/pre&gt;
&lt;p&gt;So, in conclusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't put private stuff in code. &lt;/li&gt;
&lt;ul&gt;
&lt;li&gt;Seems obvious, &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.internetnews.com/blog/skerner/github-search-exposes-passwords.html"&gt;but&lt;/a&gt;...&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Avoid putting private stuff in &lt;em&gt;common &lt;/em&gt;config files 
&lt;ul&gt;
&lt;li&gt;Externalize them AND ignore the externalized file so they don't get checked in&lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Consider using Environment Variables or User-level config options. 
&lt;ul&gt;
&lt;li&gt;Keep sensitive config out of your project folder at development time&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I'm sure I missed something. What are YOUR tips, Dear Reader? &lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.asp.net/identity/overview/features-api/best-practices-for-deploying-passwords-and-other-sensitive-data-to-aspnet-and-azure"&gt;Best practices for deploying passwords and other sensitive data to ASP.NET and Azure App Service&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Image Copyright Shea Parikh - used under license from &lt;/em&gt;&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~getcolorstock.com"&gt;&lt;em&gt;http://getcolorstock.com&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Sponsor:&lt;/strong&gt; Big thanks to Infragistics for sponsoring the blog this week! Responsive web design on any browser, any platform and any device with &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~bit.ly/1JWnScH"&gt;Infragistics jQuery/HTML5 Controls&lt;/a&gt;.&amp;nbsp; Get super-charged performance with the world’s fastest HTML5 Grid - &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~bit.ly/1JWnScH"&gt;Download for free now&lt;/a&gt;!&lt;/p&gt;
&lt;br/&gt;&lt;hr/&gt;© 2015 Scott Hanselman. All rights reserved. 
&lt;br/&gt;&lt;/div&gt;&lt;Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.hanselman.com/~/i/131629835/0/scotthanselman"&gt;
&lt;div style="clear:both;padding-top:0.2em;"&gt;&lt;a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Share on Google+" href="http://feeds.hanselman.com/_/30/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Tweet This" href="http://feeds.hanselman.com/_/24/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/131629835/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;/div&gt;
</content:encoded></item><item><guid isPermaLink="false">00000000-0000-0000-0000000067688</guid><link>http://www.binaryintellect.net/articles/7751fa4c-5638-4090-bb4a-4c5f0a2513da.aspx</link><title>Use Dependency Injection in ASP.NET MVC 6 </title><description> Bipin Joshi shows how Dependency Injection works in ASP.NET MVC 6, with examples for singleton, scoped, transient and instance modes.</description><pubDate>Tue, 29 Dec 2015 12:39:16 Z</pubDate><enclosure url="//media-www-asp.azureedge.net/media/3119802/bipin-joshi.jpg" type="image/png" /></item><item><guid isPermaLink="false">00000000-0000-0000-0000000067680</guid><link>https://www.youtube.com/watch?v=vqcAVic4Ej0</link><title>Building APIs with MVC 6 and OAuth</title><description> [video] Here's a great presentation from Filip Ekberg at DDD Brisbane 2015 describing how he and his team have been building APIs using ASP.NET MVC 6 and OAuth.</description><pubDate>Mon, 28 Dec 2015 15:29:49 Z</pubDate><enclosure url="//media-www-asp.azureedge.net/media/3945063/filip-ekberg.jpg" type="image/png" /></item><item><guid isPermaLink="false">00000000-0000-0000-0000000067679</guid><link>http://www.strathweb.com/2015/12/running-asp-net-5-website-on-iis/</link><title>Running ASP.NET 5 website on IIS</title><description> Filip Woj. documents the steps required to run an ASP.NET 5 application on IIS.</description><pubDate>Fri, 25 Dec 2015 15:27:29 Z</pubDate><enclosure url="//media-www-asp.azureedge.net/media/3265883/filip-wojcieszyn.jpg" type="image/png" /></item><item><guid isPermaLink="false">http://www.hanselman.com/blog/PermaLink.aspx?guid=447c22e1-a311-4cb8-9e06-6bbbee47fdf6</guid><link>http://feeds.hanselman.com/~/129951725/0/scotthanselman~Exploring-the-new-NET-dotnet-Command-Line-Interface-CLI.aspx</link><category>Open Source</category><title>Exploring the new .NET "dotnet" Command Line Interface (CLI)</title><description>&lt;div&gt;&lt;p&gt;I've never much liked the whole "dnvm" and "dnu" and "dnx" command line stuff in the new ASP.NET 5 beta bits. There's reasons for each to exist and they were and they have been important steps, both organizationally and as aids to the learning process.&lt;/p&gt; &lt;p&gt;My thinking has always been that when a new person sits down to learn node, python, ruby, golang, whatever, for the most part their experience is something like this. It should be just as easy - or easier - to use .NET. &lt;/p&gt; &lt;p&gt;This is just a psuedocode. Don't sweat it too much.&lt;/p&gt;&lt;pre&gt;apt-get install mylang #where mylang is some language/runtime&lt;br&gt;#write or generate a foo.fb hello world program&lt;br&gt;mylang foo #compiles and runs foo&lt;/pre&gt;
&lt;p&gt;I think folks using and learning .NET should have the same experience as with Go or Ruby. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy To Get - Getting .NET should be super easy on every platform. 
&lt;ul&gt;
&lt;li&gt;We are starting to do this with &lt;a href="http://get.asp.net"&gt;http://get.asp.net&lt;/a&gt; and we'll have the same for .NET Core alone, I'm sure. &lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Easy Hello World - It should be easy to create a basic app and build from there. 
&lt;ul&gt;
&lt;li&gt;You can "dotnet new" and get hello world. Perhaps more someday? &lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Easy Compile and Run 
&lt;ul&gt;
&lt;li&gt;Just "dotnet run" and it compiles AND executes &lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Real .NET 
&lt;ul&gt;
&lt;li&gt;Fast, scalable, native speed when possible, reliable &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I've been exploring the (very early but promising) work at &lt;a title="https://github.com/dotnet/cli" href="https://github.com/dotnet/cli"&gt;https://github.com/dotnet/cli&lt;/a&gt; that will ship next year sometime.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE: &lt;/strong&gt;This toolchain is [&lt;em&gt;today&lt;/em&gt;] independent from the DNX-based .NET Core + ASP.NET 5 RC bits. If you are looking for .NET Core + ASP.NET 5 RC bits, you can find instructions on the &lt;a href="http://get.asp.net/"&gt;http://get.asp.net/&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;p&gt;Once I installed the "dotnet" cli, I can do this:&lt;/p&gt;&lt;pre&gt;&amp;gt;dotnet new&lt;br&gt;&amp;gt;dotnet restore&lt;br&gt;&amp;gt;dotnet run&lt;/pre&gt;
&lt;p&gt;Imagine with me, when you combine this with the &lt;a href="http://code.visualstudio.com"&gt;free Visual Studio Code&lt;/a&gt; editor which runs on Mac, Windows, and Linux, you've got a pretty interesting story. Open Source .NET that runs everywhere, easily.&lt;/p&gt;
&lt;p&gt;Here is a longer command line prompt that includes me just typing "dotnet" at the top to get a sense of what's available.&lt;/p&gt;&lt;pre&gt;C:\Users\Scott\Desktop\fabulous&amp;gt;dotnet&lt;br&gt;.NET Command Line Interface&lt;br&gt;Usage: dotnet [common-options] [command] [arguments]&lt;br&gt;&lt;br&gt;Arguments:&lt;br&gt;  [command]     The command to execute&lt;br&gt;  [arguments]   Arguments to pass to the command&lt;br&gt;&lt;br&gt;Common Options (passed before the command):&lt;br&gt;  -v|--verbose  Enable verbose output&lt;br&gt;&lt;br&gt;Common Commands:&lt;br&gt;  new           Initialize a basic .NET project&lt;br&gt;  restore       Restore dependencies specified in the .NET project&lt;br&gt;  compile       Compiles a .NET project&lt;br&gt;  publish       Publishes a .NET project for deployment (including the runtime)&lt;br&gt;  run           Compiles and immediately executes a .NET project&lt;br&gt;  repl          Launch an interactive session (read, eval, print, loop)&lt;br&gt;  pack          Creates a NuGet package&lt;br&gt;&lt;br&gt;C:\Users\Scott\Desktop\fabulous&amp;gt;dotnet new&lt;br&gt;Created new project in C:\Users\Scott\Desktop\fabulous.&lt;br&gt;&lt;br&gt;C:\Users\Scott\Desktop\fabulous&amp;gt;dotnet restore&lt;br&gt;Microsoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16231&lt;br&gt;&lt;br&gt;  CACHE https://www.myget.org/F/dotnet-core/api/v3/index.json&lt;br&gt;  CACHE https://api.nuget.org/v3/index.json&lt;br&gt;Restoring packages for C:\Users\Scott\Desktop\fabulous\project.json&lt;br&gt;Writing lock file C:\Users\Scott\Desktop\fabulous\project.lock.json&lt;br&gt;Restore complete, 947ms elapsed&lt;br&gt;&lt;br&gt;NuGet Config files used:&lt;br&gt;    C:\Users\Scott\AppData\Roaming\NuGet\nuget.config&lt;br&gt;    C:\Users\Scott\Desktop\nuget.config&lt;br&gt;    C:\Users\Scott\Desktop\fabulous\nuget.config&lt;br&gt;&lt;br&gt;Feeds used:&lt;br&gt;    https://www.myget.org/F/dotnet-core/api/v3/flatcontainer/&lt;br&gt;    https://api.nuget.org/v3-flatcontainer/&lt;br&gt;&lt;br&gt;C:\Users\Scott\Desktop\fabulous&amp;gt;dotnet run&lt;br&gt;Hello World!&lt;/pre&gt;
&lt;p&gt;Note that I ran dotnet restore once before on another projects so that output was not very noisy this time.&lt;/p&gt;
&lt;h3&gt;Native Compilation of .NET applications&lt;/h3&gt;
&lt;p&gt;This is cool, but things get REALLY compelling when we consider native compilation. That literally means our EXE becomes a native executable on a platform that doesn't require any external dependencies. No .NET. It just runs and it runs fast.&lt;/p&gt;
&lt;p&gt;It's early days, and right now per the repro it's just hello world and a few samples but essentially when you do "dotnet compile" you get this, right, but it requires the .NET Core Runtime and all the supporting libraries. It JITs when it runs like the .NET you know and love.&lt;/p&gt;
&lt;p&gt;&lt;img title=".NET Core Compiled EXE" style="display: inline" alt=".NET Core Compiled EXE" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/ef1a3ae5fa91_12832/image_af525728-83e8-40d1-952a-856a3775b110.png" width="507" height="232"&gt;&lt;/p&gt;
&lt;p&gt;But if you "dotnet compile --native" you run it through the .NET Native chain and a larger EXE pops out. But that EXE is singular and native and just runs.&lt;/p&gt;
&lt;p&gt;&lt;img title="Native compiled .NET Core EXE" style="display: inline" alt="Native compiled .NET Core EXE" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/ef1a3ae5fa91_12832/image_729c4e69-567c-4713-956a-4ee0e8dcc12d.png" width="374" height="117"&gt;&lt;/p&gt;
&lt;p&gt;Again, early days, but hugely exciting. Here's the high&lt;a href="https://github.com/dotnet/corert/blob/master/Documentation/high-level-engineering-plan.md"&gt;-level engineering plan on GitHub&lt;/a&gt; that you can explore.&lt;/p&gt;
&lt;h3&gt;Related Projects&lt;/h3&gt;
&lt;p&gt;There are many .NET related projects on GitHub.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://github.com/Microsoft/dotnet"&gt;.NET home repo&lt;/a&gt; links to 100s of .NET projects, from Microsoft and the community. 
&lt;li&gt;The &lt;a href="https://github.com/dotnet/core"&gt;.NET Core repo&lt;/a&gt; links to .NET Core related projects from Microsoft. 
&lt;li&gt;The &lt;a href="https://github.com/aspnet/home"&gt;ASP.NET home repo&lt;/a&gt; is the best place to start learning about &lt;a href="http://www.asp.net/"&gt;ASP.NET 5&lt;/a&gt;. 
&lt;li&gt;&lt;a href="http://dotnet.github.io"&gt;http://dotnet.github.io&lt;/a&gt; is a good place to discover .NET Foundation projects. &lt;/li&gt;&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Sponsor: &lt;/strong&gt;Big thanks to Redgate for sponsoring the feed this week! &lt;strong&gt;Have you got SQL fingers? &lt;/strong&gt;Try &lt;a href="http://bit.ly/1VdVN7g"&gt;SQL Prompt&lt;/a&gt; and you’ll be able to write, refactor, and reformat SQL effortlessly in SSMS and Visual Studio. &lt;a href="http://bit.ly/1VdVN7g"&gt;Find out more&lt;/a&gt; with a 28 day free trial!&lt;/p&gt;&lt;br/&gt;&lt;hr/&gt;© 2015 Scott Hanselman. All rights reserved. &lt;br/&gt;&lt;/div&gt;&lt;div style="clear:both;padding-top:0.2em;"&gt;&lt;a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Share on Google+" href="http://feeds.hanselman.com/_/30/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Tweet This" href="http://feeds.hanselman.com/_/24/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;/div&gt;
</description><pubDate>Thu, 24 Dec 2015 22:57:51 Z</pubDate><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.hanselman.com/blog/ExploringTheNewNETDotnetCommandLineInterfaceCLI.aspx</feedburner:origLink><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.hanselman.com/blog/Trackback.aspx?guid=447c22e1-a311-4cb8-9e06-6bbbee47fdf6</trackback:ping><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.hanselman.com/blog/pingback.aspx</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.hanselman.com/blog/PermaLink.aspx?guid=447c22e1-a311-4cb8-9e06-6bbbee47fdf6</pingback:target><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Hanselman</dc:creator><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.hanselman.com/blog/CommentView.aspx?guid=447c22e1-a311-4cb8-9e06-6bbbee47fdf6</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.hanselman.com/blog/SyndicationService.asmx/GetEntryCommentsRss?guid=447c22e1-a311-4cb8-9e06-6bbbee47fdf6</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">39</slash:comments><comments>http://www.hanselman.com/blog/CommentView.aspx?guid=447c22e1-a311-4cb8-9e06-6bbbee47fdf6</comments><content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/">&lt;div&gt;&lt;p&gt;I've never much liked the whole "dnvm" and "dnu" and "dnx" command line stuff in the new ASP.NET 5 beta bits. There's reasons for each to exist and they were and they have been important steps, both organizationally and as aids to the learning process.&lt;/p&gt; &lt;p&gt;My thinking has always been that when a new person sits down to learn node, python, ruby, golang, whatever, for the most part their experience is something like this. It should be just as easy - or easier - to use .NET. &lt;/p&gt; &lt;p&gt;This is just a psuedocode. Don't sweat it too much.&lt;/p&gt;&lt;pre&gt;apt-get install mylang #where mylang is some language/runtime
&lt;br&gt;#write or generate a foo.fb hello world program
&lt;br&gt;mylang foo #compiles and runs foo&lt;/pre&gt;
&lt;p&gt;I think folks using and learning .NET should have the same experience as with Go or Ruby. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy To Get - Getting .NET should be super easy on every platform. 
&lt;ul&gt;
&lt;li&gt;We are starting to do this with &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~get.asp.net"&gt;http://get.asp.net&lt;/a&gt; and we'll have the same for .NET Core alone, I'm sure. &lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Easy Hello World - It should be easy to create a basic app and build from there. 
&lt;ul&gt;
&lt;li&gt;You can "dotnet new" and get hello world. Perhaps more someday? &lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Easy Compile and Run 
&lt;ul&gt;
&lt;li&gt;Just "dotnet run" and it compiles AND executes &lt;/li&gt;&lt;/ul&gt;
&lt;li&gt;Real .NET 
&lt;ul&gt;
&lt;li&gt;Fast, scalable, native speed when possible, reliable &lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I've been exploring the (very early but promising) work at &lt;a title="https://github.com/dotnet/cli" href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/dotnet/cli"&gt;https://github.com/dotnet/cli&lt;/a&gt; that will ship next year sometime.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE: &lt;/strong&gt;This toolchain is [&lt;em&gt;today&lt;/em&gt;] independent from the DNX-based .NET Core + ASP.NET 5 RC bits. If you are looking for .NET Core + ASP.NET 5 RC bits, you can find instructions on the &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~get.asp.net/"&gt;http://get.asp.net/&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;p&gt;Once I installed the "dotnet" cli, I can do this:&lt;/p&gt;&lt;pre&gt;&amp;gt;dotnet new
&lt;br&gt;&amp;gt;dotnet restore
&lt;br&gt;&amp;gt;dotnet run&lt;/pre&gt;
&lt;p&gt;Imagine with me, when you combine this with the &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~code.visualstudio.com"&gt;free Visual Studio Code&lt;/a&gt; editor which runs on Mac, Windows, and Linux, you've got a pretty interesting story. Open Source .NET that runs everywhere, easily.&lt;/p&gt;
&lt;p&gt;Here is a longer command line prompt that includes me just typing "dotnet" at the top to get a sense of what's available.&lt;/p&gt;&lt;pre&gt;C:\Users\Scott\Desktop\fabulous&amp;gt;dotnet
&lt;br&gt;.NET Command Line Interface
&lt;br&gt;Usage: dotnet [common-options] [command] [arguments]
&lt;br&gt;
&lt;br&gt;Arguments:
&lt;br&gt;  [command]     The command to execute
&lt;br&gt;  [arguments]   Arguments to pass to the command
&lt;br&gt;
&lt;br&gt;Common Options (passed before the command):
&lt;br&gt;  -v|--verbose  Enable verbose output
&lt;br&gt;
&lt;br&gt;Common Commands:
&lt;br&gt;  new           Initialize a basic .NET project
&lt;br&gt;  restore       Restore dependencies specified in the .NET project
&lt;br&gt;  compile       Compiles a .NET project
&lt;br&gt;  publish       Publishes a .NET project for deployment (including the runtime)
&lt;br&gt;  run           Compiles and immediately executes a .NET project
&lt;br&gt;  repl          Launch an interactive session (read, eval, print, loop)
&lt;br&gt;  pack          Creates a NuGet package
&lt;br&gt;
&lt;br&gt;C:\Users\Scott\Desktop\fabulous&amp;gt;dotnet new
&lt;br&gt;Created new project in C:\Users\Scott\Desktop\fabulous.
&lt;br&gt;
&lt;br&gt;C:\Users\Scott\Desktop\fabulous&amp;gt;dotnet restore
&lt;br&gt;Microsoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16231
&lt;br&gt;
&lt;br&gt;  CACHE https://www.myget.org/F/dotnet-core/api/v3/index.json
&lt;br&gt;  CACHE https://api.nuget.org/v3/index.json
&lt;br&gt;Restoring packages for C:\Users\Scott\Desktop\fabulous\project.json
&lt;br&gt;Writing lock file C:\Users\Scott\Desktop\fabulous\project.lock.json
&lt;br&gt;Restore complete, 947ms elapsed
&lt;br&gt;
&lt;br&gt;NuGet Config files used:
&lt;br&gt;    C:\Users\Scott\AppData\Roaming\NuGet\nuget.config
&lt;br&gt;    C:\Users\Scott\Desktop\nuget.config
&lt;br&gt;    C:\Users\Scott\Desktop\fabulous\nuget.config
&lt;br&gt;
&lt;br&gt;Feeds used:
&lt;br&gt;    https://www.myget.org/F/dotnet-core/api/v3/flatcontainer/
&lt;br&gt;    https://api.nuget.org/v3-flatcontainer/
&lt;br&gt;
&lt;br&gt;C:\Users\Scott\Desktop\fabulous&amp;gt;dotnet run
&lt;br&gt;Hello World!&lt;/pre&gt;
&lt;p&gt;Note that I ran dotnet restore once before on another projects so that output was not very noisy this time.&lt;/p&gt;
&lt;h3&gt;Native Compilation of .NET applications&lt;/h3&gt;
&lt;p&gt;This is cool, but things get REALLY compelling when we consider native compilation. That literally means our EXE becomes a native executable on a platform that doesn't require any external dependencies. No .NET. It just runs and it runs fast.&lt;/p&gt;
&lt;p&gt;It's early days, and right now per the repro it's just hello world and a few samples but essentially when you do "dotnet compile" you get this, right, but it requires the .NET Core Runtime and all the supporting libraries. It JITs when it runs like the .NET you know and love.&lt;/p&gt;
&lt;p&gt;&lt;img title=".NET Core Compiled EXE" style="display: inline" alt=".NET Core Compiled EXE" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/ef1a3ae5fa91_12832/image_af525728-83e8-40d1-952a-856a3775b110.png" width="507" height="232"&gt;&lt;/p&gt;
&lt;p&gt;But if you "dotnet compile --native" you run it through the .NET Native chain and a larger EXE pops out. But that EXE is singular and native and just runs.&lt;/p&gt;
&lt;p&gt;&lt;img title="Native compiled .NET Core EXE" style="display: inline" alt="Native compiled .NET Core EXE" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/ef1a3ae5fa91_12832/image_729c4e69-567c-4713-956a-4ee0e8dcc12d.png" width="374" height="117"&gt;&lt;/p&gt;
&lt;p&gt;Again, early days, but hugely exciting. Here's the high&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/dotnet/corert/blob/master/Documentation/high-level-engineering-plan.md"&gt;-level engineering plan on GitHub&lt;/a&gt; that you can explore.&lt;/p&gt;
&lt;h3&gt;Related Projects&lt;/h3&gt;
&lt;p&gt;There are many .NET related projects on GitHub.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/Microsoft/dotnet"&gt;.NET home repo&lt;/a&gt; links to 100s of .NET projects, from Microsoft and the community. 
&lt;li&gt;The &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/dotnet/core"&gt;.NET Core repo&lt;/a&gt; links to .NET Core related projects from Microsoft. 
&lt;li&gt;The &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/aspnet/home"&gt;ASP.NET home repo&lt;/a&gt; is the best place to start learning about &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.asp.net/"&gt;ASP.NET 5&lt;/a&gt;. 
&lt;li&gt;&lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~dotnet.github.io"&gt;http://dotnet.github.io&lt;/a&gt; is a good place to discover .NET Foundation projects. &lt;/li&gt;&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Sponsor: &lt;/strong&gt;Big thanks to Redgate for sponsoring the feed this week! &lt;strong&gt;Have you got SQL fingers? &lt;/strong&gt;Try &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~bit.ly/1VdVN7g"&gt;SQL Prompt&lt;/a&gt; and you’ll be able to write, refactor, and reformat SQL effortlessly in SSMS and Visual Studio. &lt;a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~bit.ly/1VdVN7g"&gt;Find out more&lt;/a&gt; with a 28 day free trial!&lt;/p&gt;
&lt;br/&gt;&lt;hr/&gt;© 2015 Scott Hanselman. All rights reserved. 
&lt;br/&gt;&lt;/div&gt;&lt;Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0" hspace="0" src="http://feeds.hanselman.com/~/i/129951725/0/scotthanselman"&gt;
&lt;div style="clear:both;padding-top:0.2em;"&gt;&lt;a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Share on Google+" href="http://feeds.hanselman.com/_/30/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/googleplus20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Tweet This" href="http://feeds.hanselman.com/_/24/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/129951725/scotthanselman"&gt;&lt;img height="20" src="http://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"&gt;&lt;/a&gt;&amp;#160;&lt;/div&gt;
</content:encoded></item><item><guid isPermaLink="false">00000000-0000-0000-0000000067678</guid><link>http://www.khalidabuhakmeh.com/asp-net-5-mvc-6-taghelpers-and-the-cake</link><title>ASP.NET 5, MVC 6, TagHelpers, And The Cake </title><description> Khalid Abuhakmeh walks through an issue he ran into using a TagHelper that processes Markdown, showing a few workarounds.</description><pubDate>Thu, 24 Dec 2015 15:25:24 Z</pubDate><enclosure url="//media-www-asp.azureedge.net/media/4301982/khalid_abuhakmeh.jpg" type="image/png" /></item><item><guid isPermaLink="false">00000000-0000-0000-0000000067677</guid><link>http://www.syncfusion.com/blogs/post/Video-Review-Whats-New-with-MVC-6-by-Ugo-Lattanzi.aspx</link><title>What’s New with ASP.NET MVC 6</title><description> [video] Here's a 45 minute video presentation from Ugo Lattanzi that will walk you through the most important new features found in ASP.NET MVC 6.</description><pubDate>Wed, 23 Dec 2015 15:23:18 Z</pubDate><enclosure url="//media-www-asp.azureedge.net/media/4194992/ugo-lattanzi-.jpg" type="image/png" /></item><item><guid isPermaLink="false">00000000-0000-0000-0000000067674</guid><link>https://www.twilio.com/blog/2015/12/hola-ip-messaging-real-time-translated-chat-with-asp-net-microsoft-translator-and-ip-messaging.html</link><title>Hola IP Messaging! Real time translated chat with ASP.NET, Microsoft Translator and IP Messaging</title><description> Here's an awesome post from Devin Rader that leverages the Microsoft Translation API, Twilio IP messaging, webhooks, and an ASP.NET MVC application to build a real-time translated chat application.</description><pubDate>Tue, 22 Dec 2015 16:34:10 Z</pubDate><enclosure url="//media-www-asp.azureedge.net/media/3065262/anonymous.png" type="image/png" /></item></channel></rss>